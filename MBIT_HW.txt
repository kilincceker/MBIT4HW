The bundle provides an ideal testing framework including tool supports for Hardware Description Language (HDL) validation
of a hardware. The framework combines the holistic and mutation testing to achieve ideal testing called Model-Based Ideal Test (MBIT).
The steps are; 
	1.Test preparation
		1.1.Model Construction(Automatic)
		1.2.Model Mutation(Manual)
		1.3.Model Conversion(Automatic)
		1.4.Test Generation(Automatic)
	2.Test Composition
		2.1.Pre-selection(Automatic)
		2.2.Test Suite Construction(Automatic)
The rough details including tool supports will be explained as follows considering given steps.
1.Test preparation
	It is the first step of the framework, which starts with construction of the model from HDL.
The HDL is modeled by means of a finite state machine(FSM) automatically using JFLAP or PQ-Analysis tool. The model constructed is called original
or fault-free FSM. Then, the mutants are generated from the original FSM by utilizing mutation operators that 
are specific to the FSM. Then, the models including mutants are converted to the regular expressions(REs) using
JFLAP tool or PQ-Analysis tool. At the final step of the test preparation, the test sequences are generated from
the corresponding RE models automatically using PQ-TestGen and PQ-RanTest tools. 
	1.1.Model construction step requires expertise of the designer or tester who knows basics of the GUT. However, it can be
directly constructed from the given specification of the GUT without expertise and extensive human effort. In proposed
framework, it is constructed from the GUT manually with knowledge of tester about the system. The JFLAP tool is preferred due to
its easy to use interface. The FSM model is drawn using the interface of the JFLAP tool. Note that this step can be 
carried by using PQ-Analysis tool but there isn't any direct interface exist to draw the FSM model. Therefore, the choice of 
PQ-Analysis tool requires a basic knowledge.
	Tool Support:
			[1]JFLAP, available at http://www.jflap.org/
			[2]PQ-Analysis, avaliable at http://download.ivknet.de/
	Example: (TBD)
	1.2.Mutant generation step is carried manually by means of the JFLAP tool. It requires utilization of the mutation operators that 
	are a delete, insert, or replace of a state or transition of the FSM. Note that the selection and application of proper
	mutation operator, or combination of them, is based on the internal behavior of the system. Because we only focus on
	semantic fault that has a mean and changes specific behavior of the system. The selected behavior for the mutation is 
	needed to be realized at code level. Therefore, the rest of the faults are neglected from the proposed framework.
	Tool Support:
			[1]JFLAP, available at http://www.jflap.org/	
			[2]PQ-Analysis, avaliable at http://download.ivknet.de/
	Example: (TBD)
	1.3.Model conversion step is carried out manually using JFLAP tool for original and each mutant models. This step 
	can be also done using PQ-Analysis tool, which results in longer RE models due usage of different conversion algorithm
	than JFLAP tool.
	Tool Support:
			[1]JFLAP, available at http://www.jflap.org/	
			[2]PQ-Analysis, avaliable at http://download.ivknet.de/
	Example: (TBD)
	1.4.Test generation step is done using PQ-TestGen and PQ-RanTest tool which takes inputs from the PQ-Analysis results.
	Note than there is preliminary step between model conversion and test generation called analysis step that results in 
	context table, which represents the RE after analysis. The resulted tables are used in test generation algorithms.
	Tool Support:	
			[1]PQ-Analysis, avaliable at http://download.ivknet.de/
			[2]PQ-TestGen, download link for jar file
			[3]PQ-RanTest, download link for jar file
	Example: (TBD)
	2.Testing Composition
	In test composition step, the test sequences generated from original and mutant models are automatically executed on original and
	mutant GUT, which are depending on the positive and negative testing. In positive testing, the test sequences generated
	from original model are executed on mutant GUTs that are obtained from original GUT using mutation operators at code
	level. In negative testing, the test sequences generated from mutant models are executed on original GUT. These steps
	define test execution. In test selection, the failed test sequences from positive and negative testing for each execution
	are selected to achieve ideal test suite. To this end, the proposed framework satisfies requirements of the ideal
	testing in the scope of the model of GUT.
		2.1.Test pre-selection step is performed by Vivado Design Suite (Xilinx) for which we write a generic test bench in Verilog HDL. The test bench
		automatically reads the test sequences and execute them on the corresponding HDL.
		Tool Support:	
			[1]Vivado Design Suite (Xilinx), avaliable at https://www.xilinx.com/products/design-tools/vivado.html
			[2]The generic test bench, Link
		Example: (TBD)
		2.2.Test suite construction is also performed by means of test bench in which the failed test sequences executed on corresponding
		HDL are selected and written to file that is called ideal test suite for each models.  
		Tool Support:	
			[1]Selenium, avaliable at https://www.seleniumhq.org/
			[2]The generic test script, download link for Java file
			[3]The test selection script, download link for Java file
		Example: (TBD)
 